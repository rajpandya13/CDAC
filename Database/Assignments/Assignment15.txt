-------------------------------------------------------------
1. Write a procedure which accepts in parameter as empno and calculates total salary for that employee. Display salary out of procedure. 
total salary = sal + comm
->
mysql> DELIMITER //
mysql> CREATE PROCEDURE CalculateTotalSalary(IN empno_param INT)
    -> BEGIN
    ->     DECLARE total_salary DECIMAL(10,2);
    ->     SELECT sal + IFNULL(comm, 0) INTO total_salary
    ->     FROM emp
    ->     WHERE empno = empno_param;
    ->     SELECT total_salary AS 'Total Salary';
    -> END;
Query OK, 0 rows affected (0.02 sec)

mysql> CALL CalculateTotalSalary(7499);
+-------------+
| Total Salary|
+-------------+
|      1900.00|
+-------------+
-------------------------------------------------------------

-------------------------------------------------------------
2. Write a procedure which takes empno of 2 employees. Compare salaries of employees and display ename, sal and job for the employee who earns more salary out of procedure. 
->
mysql> DELIMITER //
mysql> CREATE PROCEDURE CompareSalaries(IN empno1 INT, IN empno2 INT)
    -> BEGIN
    ->     DECLARE sal1 DECIMAL(10,2);
    ->     DECLARE sal2 DECIMAL(10,2);
    ->     DECLARE emp1_ename VARCHAR(50);
    ->     DECLARE emp2_ename VARCHAR(50);
    ->     DECLARE emp1_job VARCHAR(50);
    ->     DECLARE emp2_job VARCHAR(50);
    -> 
    ->     SELECT sal, ename, job INTO sal1, emp1_ename, emp1_job
    ->     FROM emp
    ->     WHERE empno = empno1;
    -> 
    ->     SELECT sal, ename, job INTO sal2, emp2_ename, emp2_job
    ->     FROM emp
    ->     WHERE empno = empno2;
    -> 
    ->     IF sal1 > sal2 THEN
    ->         SELECT emp1_ename AS 'Employee Name', sal1 AS 'Salary', emp1_job AS 'Job';
    ->     ELSE
    ->         SELECT emp2_ename AS 'Employee Name', sal2 AS 'Salary', emp2_job AS 'Job';
    ->     END IF;
    -> END;
Query OK, 0 rows affected (0.02 sec)

mysql> CALL CompareSalaries(7499, 7521);
+-----------------+--------+-----------+
| Employee Name   | Salary | Job       |
+-----------------+--------+-----------+
| ALLEN           | 1600.00| SALESMAN  |
+-----------------+--------+-----------+
-------------------------------------------------------------

-------------------------------------------------------------
3. Write a procedure which accepts ename and job as parameters and calculates salary hike depending on job. 
->
mysql> DELIMITER //
mysql> CREATE PROCEDURE CalculateSalaryHike(IN ename_param VARCHAR(50), IN job_param VARCHAR(50))
    -> BEGIN
    ->     DECLARE salary DECIMAL(10,2);
    ->     DECLARE new_salary DECIMAL(10,2);
    ->     SELECT sal INTO salary
    ->     FROM emp
    ->     WHERE ename = ename_param;
    -> 
    ->     IF job_param = 'CLERK' THEN
    ->         SET new_salary = salary * 1.10;
    ->     ELSEIF job_param = 'SALESMAN' THEN
    ->         SET new_salary = salary * 1.07;
    ->     ELSEIF job_param = 'ANALYST' THEN
    ->         SET new_salary = salary * 1.05;
    ->     ELSE
    ->         SET new_salary = salary;
    ->     END IF;
    ->     SELECT new_salary AS 'New Salary';
    -> END;
Query OK, 0 rows affected (0.02 sec)

mysql> CALL CalculateSalaryHike('ALLEN', 'SALESMAN');
+------------+
| New Salary |
+------------+
|    1712.00 |
+------------+
-------------------------------------------------------------

-------------------------------------------------------------
4. Pass empno to the procedure. Find if employee exists in the table. If so, print sal out of procedure else print sal as 0. 
->
mysql> DELIMITER //
mysql> CREATE PROCEDURE CheckEmployeeSalary(IN empno_param INT)
    -> BEGIN
    ->     DECLARE employee_salary DECIMAL(10,2) DEFAULT 0;
    ->     SELECT sal INTO employee_salary
    ->     FROM emp
    ->     WHERE empno = empno_param;
    ->     SELECT employee_salary AS 'Salary';
    -> END;
Query OK, 0 rows affected (0.02 sec)

mysql> CALL CheckEmployeeSalary(7499);
+--------+
| Salary |
+--------+
| 1600.00|
+--------+
-------------------------------------------------------------

-------------------------------------------------------------
5. Write a function which will display email for employees working as salesman. 
   email generated is as follows: 2nd and 3rd letter of name + last 2 letters of job in caps + deptno+'@mycompany.com'.
->
mysql> DELIMITER //
mysql> CREATE FUNCTION GenerateEmail(ename_param VARCHAR(50), job_param VARCHAR(50), deptno_param INT)
    -> RETURNS VARCHAR(100)
    -> BEGIN
    ->     DECLARE email VARCHAR(100);
    ->     SET email = CONCAT(SUBSTRING(ename_param, 2, 2), UPPER(SUBSTRING(job_param, LENGTH(job_param)-1, 2)), deptno_param, '@mycompany.com');
    ->     RETURN email;
    -> END;
Query OK, 0 rows affected (0.03 sec)

mysql> SELECT GenerateEmail('ALLEN', 'SALESMAN', 30);
+---------------------------------------------------+
| GenerateEmail('ALLEN', 'SALESMAN', 30)            |
+---------------------------------------------------+
| LLEMAN30@mycompany.com                           |
+---------------------------------------------------+


-------------------------------------------------------------
6. Write a function which will return square of the number.  
   Call this function in the procedure 'calculate'. Pass any number to this procedure and call a function in the procedure by passing a number.

->  
mysql> DELIMITER //
mysql> CREATE FUNCTION SquareNumber(num INT) 
    -> RETURNS INT
    -> BEGIN
    ->     RETURN num * num;
    -> END;
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE PROCEDURE Calculate()
    -> BEGIN
    ->     DECLARE result INT;
    ->     SET result = SquareNumber(5);
    ->     SELECT result AS 'Square of Number';
    -> END;
Query OK, 0 rows affected (0.02 sec)

mysql> CALL Calculate();
+-------------------+
| Square of Number  |
+-------------------+
| 25                |
+-------------------+

-------------------------------------------------------------
7. Write a cursor which will display salary hike as follows:  
   If employee is a clerk, then hike is 10%  
   If employee is a salesman, then hike is 7%  
   If employee is an analyst, then hike is 5%  
   Otherwise, no hike.

->  
mysql> DELIMITER //
mysql> CREATE PROCEDURE SalaryHike()
    -> BEGIN
    ->     DECLARE done INT DEFAULT 0;
    ->     DECLARE emp_name VARCHAR(50);
    ->     DECLARE emp_job VARCHAR(50);
    ->     DECLARE emp_salary DECIMAL(10,2);
    ->     DECLARE new_salary DECIMAL(10,2);
    ->     DECLARE emp_cursor CURSOR FOR 
    ->         SELECT ename, job, sal FROM emp;
    ->     DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    ->     
    ->     OPEN emp_cursor;
    ->     read_loop: LOOP
    ->         FETCH emp_cursor INTO emp_name, emp_job, emp_salary;
    ->         IF done THEN
    ->             LEAVE read_loop;
    ->         END IF;
    ->         IF emp_job = 'CLERK' THEN
    ->             SET new_salary = emp_salary * 1.10;
    ->         ELSEIF emp_job = 'SALESMAN' THEN
    ->             SET new_salary = emp_salary * 1.07;
    ->         ELSEIF emp_job = 'ANALYST' THEN
    ->             SET new_salary = emp_salary * 1.05;
    ->         ELSE
    ->             SET new_salary = emp_salary;
    ->         END IF;
    ->         SELECT emp_name AS 'Employee Name', emp_job AS 'Job', new_salary AS 'New Salary';
    ->     END LOOP;
    ->     CLOSE emp_cursor;
    -> END;
Query OK, 0 rows affected (0.03 sec)

mysql> CALL SalaryHike();
+-----------------+-----------+------------+
| Employee Name   | Job       | New Salary |
+-----------------+-----------+------------+
| SMITH           | CLERK     | 880.00     |
| ALLEN           | SALESMAN  | 1712.00    |
| WARD            | SALESMAN  | 1337.50    |
| JONES           | MANAGER   | 2975.00    |
| MARTIN          | SALESMAN  | 1337.50    |
| BLAKE           | MANAGER   | 2850.00    |


-------------------------------------------------------------
8. Try creating index.

->  
```mysql
mysql> CREATE INDEX idx_emp_sal ON emp(sal);
Query OK, 0 rows affected (0.02 sec)
-------------------------------------------------------------
9. Practice commit and rollback.


mysql> START TRANSACTION;
mysql> UPDATE emp SET sal = sal + 100 WHERE empno = 7499;
Query OK, 1 row affected (0.01 sec)

mysql> COMMIT;
Query OK, 0 rows affected (0.00 sec)

mysql> START TRANSACTION;
mysql> UPDATE emp SET sal = sal - 100 WHERE empno = 7499;
Query OK, 1 row affected (0.01 sec)

mysql> ROLLBACK;
Query OK, 0 rows affected (0.00 sec)
